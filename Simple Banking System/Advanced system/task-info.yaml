type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {

            Scanner scanner = new Scanner(System.in);

         Account account = new Account();

         UserInterface ui = new UserInterface(scanner,account);

         ui.start();

        }
    }
  learner_created: false
- name: src/banking/UserInterface.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class UserInterface {

        private Scanner scanner;
        private Account accounts;

        public UserInterface(Scanner scanner, Account accounts) {
            this.scanner = scanner;
            this.accounts = new Account();
        }


        public void start() {

            while (true) {
                displayOptions();
                String options = scanner.nextLine();
                if (options.equals("1")) {
                    System.out.println("");
                    this.createAccount();
                } else if (options.equals("2")) {
                    System.out.println("");
                    this.loggingIn();
                } else if (options.equals("0")) {
                    System.out.println("");
                    System.out.println("Bye!");
                    break;
                }

            }

        }

        public static void displayOptions() {
            System.out.println("1. Create an account\n2. Log into account\n3. Exit");

        }

        public void createAccount() {
            this.accounts.addingCards();

        }

        public void loggingIn() {
            if (this.accounts.loggingIn()) {
                while (true) {
                    System.out.println("1. Balance\n2. Log out\n0.Exit");
                    String options = scanner.nextLine();
                    if (options.equals("1")) {
                        System.out.println("");
                        System.out.println("Balance: " + this.accounts.getTempAccount().getBalance());
                        System.out.println("");
                    } else if (options.equals("2")) {
                        System.out.println("");
                        break;
                    } else if (options.equals("0")) {
                        System.exit(0);
                    }
                }
            }
        }


    }
  learner_created: false
- name: src/banking/Card.java
  visible: true
  text: |
    package banking;

    import java.util.Random;
    import java.util.concurrent.ThreadLocalRandom;

    public class Card {

        private String cardNumber;
        private String pin;
        private double balance = 0;

        public Card() {


        }

        private String generatePin() {
            int num = ThreadLocalRandom.current().nextInt(9999);
            String formatted = String.format("%04d", num);


            return formatted;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public String getPin() {
            return this.pin;


        }

        public void setPin(){
         this.pin = generatePin();

        }

        public void makeCreditCardNumber(){
            StringBuilder sb = new StringBuilder("400000");
            for(int i = 7; i <= 16; i++){
                Random random = new Random();
                int randomNumber = random.nextInt(10);
                sb.append(randomNumber);
            }

            this.cardNumber = sb.toString();

        }

        public double getBalance() {
            return balance;
        }

        @Override
        public String toString() {
            return this.cardNumber + " " + this.pin + " " + this.balance;
        }
    }
  learner_created: false
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Account {

        private List<Card> cards;
        private Card tempAccount;


        public Account() {
            this.cards = new ArrayList<>();

        }

        public void addingCards(){
            Card card = new Card();
            card.makeCreditCardNumber();
            card.setPin();
            System.out.println("Your card has been created");
            System.out.println("Your card number:");
            System.out.println(card.getCardNumber());
            System.out.println("Your card PIN:");
            System.out.println(card.getPin());
            System.out.println("");
            cards.add(card);


        }


        public void listingCards(){
            cards.forEach(System.out::println);
        }

        public boolean loggingIn(){
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter your card number:");
            String cardNumberEntry = scanner.nextLine();
            System.out.println("Enter your pin");
            String pinEntry = scanner.nextLine();
            for(Card search: this.cards){
                if(cardNumberEntry.equals(search.getCardNumber()) && pinEntry.equals(search.getPin())){
                    System.out.println("");
                    System.out.println("You have successfully logged in!");
                    System.out.println("");
                    this.tempAccount = search;
                    return true;
                }else{
                    System.out.println("");
                    System.out.println("Wrong number or pin!");
                    System.out.println("");
                }
            }

           return false;
        }

        public Card getTempAccount() {
            return tempAccount;
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/DatabaseEditor.java
  visible: true
  text: |+
    package banking;

    import javax.xml.crypto.Data;
    import java.sql.*;

    public class DatabaseEditor {


        public Connection connection (String filename){
            String url = "jdbc:sqlite:" + filename ;
            Connection con = null;
            try {
                con = DriverManager.getConnection(url);


            } catch (SQLException e){
                System.out.println(e.getMessage());
            }

            return con;

        }


        public void createTable(String filename) {
            // SQLite connection string
            String url = "jdbc:sqlite:" + filename;

            // SQL statement for creating a new table
            String sql = "CREATE TABLE IF NOT EXISTS card (\n"
                    +"      id integer PRIMARY KEY,\n"
                    +"      number TEXT,\n"
                    +"      pin TEXT,\n"
                    +"      balance INTEGER DEFAULT 0"

                    +");";

            try (Connection conn = DriverManager.getConnection(url);
                 Statement stmt = conn.createStatement()) {
                // create a new table
                stmt.execute(sql);

            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }

        // used to insert new values into table
        public void insert (String cardNumber, String pin, int balance, String fileName) {

            String sql = "INSERT INTO card(number,pin,balance) VALUES (?,?,?)";

            try (Connection conn = this.connection(fileName);
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, cardNumber);
                pstmt.setString(2, pin);
                pstmt.setInt(3,balance);


                pstmt.executeUpdate();
            }catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }



        }

  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 12 May 2021 15:11:32 UTC
record: -1
